<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Fetch API Table</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 8px;
            text-align: left;
            border: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
        }

        table {
            margin: 20px 0;
        }

        input {
            margin: 20px 0;
        }
    </style>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script defer>
        function fetchAndCreateTable() {
            const apiUrl = document.getElementById('apiUrl').value;

            if (!apiUrl) {
                alert('Please provide a valid API URL.');
                return;
            }

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    console.log('Fetched Data:', data); // Debugging statement
                    if (Array.isArray(data) && data.length > 0) {
                        createTable(data, "Data");
                        createLocationTable(data); // Create the location table
                    } else {
                        removeTables();
                        alert("No data found or invalid structure.");
                    }
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }

        function createTable(data, captionText) {
            removeTables(); // Remove old tables if they exist

            let table = document.createElement("table");
            table.setAttribute("class", "table table-bordered border-primary caption-top align-center");

            let cap = document.createElement("caption");
            cap.setAttribute("class", "fw-bold fs-3 text-center");
            cap.innerText = captionText;
            table.appendChild(cap);

            let thead = document.createElement("thead");
            let tbody = document.createElement("tbody");

            let thr = document.createElement("tr");

            for (let prop in data[0]) {
                let th = document.createElement("th");
                th.setAttribute("class", "text-center");
                th.innerText = prop;
                thr.appendChild(th);
            }
            thead.appendChild(thr);
            table.appendChild(thead);

            data.forEach(item => {
                let tbr = document.createElement("tr");

                for (let prop in item) {
                    let td = document.createElement("td");
                    td.setAttribute("class", "text-center");

                    if (typeof item[prop] === 'object') {
                        td.innerHTML = formatNestedObject(item[prop]);
                    } else {
                        td.innerHTML = item[prop];
                    }
                    tbr.appendChild(td);
                }
                tbody.appendChild(tbr);
            });

            table.appendChild(tbody);
            document.body.appendChild(table);
        }

        function createLocationTable(data) {
            let locationTable = document.createElement("table");
            locationTable.setAttribute("class", "table table-bordered border-success caption-top align-center");

            let locCap = document.createElement("caption");
            locCap.setAttribute("class", "fw-bold fs-3 text-center");
            locCap.innerText = "User Locations";
            locationTable.appendChild(locCap);

            let locHead = document.createElement("thead");
            let locBody = document.createElement("tbody");

            let locThr = document.createElement("tr");
            let locThUsername = document.createElement("th");
            locThUsername.innerText = "Username";
            let locThMap = document.createElement("th");
            locThMap.innerText = "View Location";

            locThr.appendChild(locThUsername);
            locThr.appendChild(locThMap);
            locHead.appendChild(locThr);
            locationTable.appendChild(locHead);

            data.forEach(item => {
                const username = item.username; // Adjust according to your API structure
                // Check how location data is structured in your API response
                const lat = item.address ? item.address.geo ? item.address.geo.lat : null : null;
                const lng = item.address ? item.address.geo ? item.address.geo.lng : null : null;

                console.log(`Processing Data - Username: ${username}, Latitude: ${lat}, Longitude: ${lng}`); // Debugging statement

                if (lat && lng && username) {
                    let locTbr = document.createElement("tr");
                    let locTdUsername = document.createElement("td");
                    locTdUsername.innerText = username;

                    let locTdMap = document.createElement("td");
                    locTdMap.setAttribute("class", "text-center");
                    locTdMap.innerHTML = `<a href="https://www.google.com/maps?q=${lat},${lng}" target="_blank">View Location</a>`;

                    locTbr.appendChild(locTdUsername);
                    locTbr.appendChild(locTdMap);
                    locBody.appendChild(locTbr);
                }
            });

            locationTable.appendChild(locBody);
            document.body.appendChild(locationTable);
        }

        function removeTables() {
            const tables = document.querySelectorAll("table");
            tables.forEach(table => table.remove());
        }

        function formatNestedObject(obj) {
            let result = '';
            for (let key in obj) {
                if (typeof obj[key] === 'object') {
                    result += formatNestedObject(obj[key]); // Recursively format nested objects
                } else {
                    result += `${key}: ${obj[key]}<br>`;
                }
            }
            return result;
        }
    </script>
</head>

<body>
    <h1 style="text-align: center;">Dynamic Fetch API Table</h1>
    <input class="form-control" type="text" id="apiUrl" placeholder="Enter API URL" value="https://jsonplaceholder.typicode.com/users" style="width: 50%; padding: 8px;" />
    <button type="button" class="btn btn-primary" onclick="fetchAndCreateTable()"
        style="padding: 5px 10px; margin-top: 10px;">Fetch Data</button>
</body>

</html>


<!-- 
Here are some similar endpoints you might find useful:

Posts

Endpoint: https://jsonplaceholder.typicode.com/posts
Description: Retrieve a list of posts or a specific post by ID.
Comments

Endpoint: https://jsonplaceholder.typicode.com/comments
Description: Retrieve a list of comments or a specific comment by ID.
Albums

Endpoint: https://jsonplaceholder.typicode.com/albums
Description: Retrieve a list of albums or a specific album by ID.
Photos

Endpoint: https://jsonplaceholder.typicode.com/photos
Description: Retrieve a list of photos or a specific photo by ID.
Todos

Endpoint: https://jsonplaceholder.typicode.com/todos
Description: Retrieve a list of todos or a specific todo by ID.
Users

Endpoint: https://jsonplaceholder.typicode.com/users
Description: Retrieve a list of users or a specific user by ID.
These endpoints are part of the JSONPlaceholder API, which provides a set of dummy data for testing and prototyping.
 -->






